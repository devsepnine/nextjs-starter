name: "Merge into master Branch"

# 이 워크플로우는 'release/' 또는 'hotfix/' 브랜치가 master 브랜치로 머지될 때 자동으로 릴리스를 생성하고 태그를 부여합니다.

on:
  pull_request:
    branches:
      - master    # master 브랜치로의 PR이 발생할 때
    types:
      - closed  # PR이 닫힐 때 (머지 또는 거부)

jobs:
  publish-release-and-tag:
    name: Publish release and tag
    runs-on: ubuntu-latest
    permissions: write-all  # GitHub API 작업을 위한 전체 권한 부여

    # release/ 또는 hotfix/ 브랜치가 master으로 머지된 경우에만 실행
    if: github.event.pull_request.merged == true &&
      (
      startsWith(github.event.pull_request.head.ref, 'release/') ||
      startsWith(github.event.pull_request.head.ref, 'hotfix/')
      )

    steps:
      # release/ 브랜치에서 버전 번호 추출 (예: release/v1.2.3 -> v1.2.3)
      - name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}  # 'release/' 접두사 제거
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV  # 버전을 환경 변수로 저장
          echo "BRANCH_NAME=Release" >> $GITHUB_ENV       # 릴리스 타입 저장

      # hotfix/ 브랜치에서 버전 번호 추출 (예: hotfix/v1.2.4 -> v1.2.4)
      - name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}  # 'hotfix/' 접두사 제거
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV  # 버전을 환경 변수로 저장
          echo "BRANCH_NAME=Hotfix" >> $GITHUB_ENV        # 핫픽스 타입 저장

      # release-drafter를 사용하여 릴리스 노트 생성 및 태그 적용
      - name: Update Release Draft
        id: draft-release
        uses: release-drafter/release-drafter@v5.22.0  # release-drafter 액션 사용
        with:
          name: ${{ env.BRANCH_NAME }} ${{ env.RELEASE_VERSION }}  # 릴리스 이름 (예: "Release v1.2.3")
          tag: ${{ env.RELEASE_VERSION }}  # 태그 이름 (예: "v1.2.3")
          publish: true  # 자동으로 릴리스 게시
          config-name: release-drafter-config.yml  # release-drafter 설정 파일
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub API 접근을 위한 토큰

  merge-master-into-develop:
    name: Create PR and add merger as reviewer
    needs: [ publish-release-and-tag ]
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      prNumber: ${{ steps.create_pr.outputs.prNumber }}
    steps:
      - name: Checkout repository (master branch)
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Create pull request from master to develop
        id: create_pr
        uses: actions/github-script@v6
        with:
          script: |
            const prTitle = "Merge master into develop";
            const prBody = "Automated PR to merge master into develop branch.";
            const base = "develop";
            const head = "master";
            
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              base: base,
              head: `${context.repo.owner}:${head}`,
            });
            
            let pr;
            if (prs.length > 0) {
              console.log("PR already exists. Using existing PR.");
              pr = prs[0];
            } else {
              const { data: newPr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                body: prBody,
                base: base,
                head: head,
                draft: false,
              });
              pr = newPr;
              console.log(`Created PR #${pr.number}`);              
            }
            core.setOutput('prNumber', pr.number);
          result-encoding: string
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add merger as reviewer
        id: add_reviewer
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = parseInt("${{ steps.create_pr.outputs.prNumber }}");
            const reviewer = "${{ github.event.pull_request.merged_by.login }}";
            console.log("Adding reviewer:", reviewer);
            const result = await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              reviewers: [ reviewer ]
            });
            console.log("Reviewers added:", result.data);
            core.setOutput('reviewerAdded', "true");
          result-encoding: string
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
